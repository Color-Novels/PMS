"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/(dashboard)/inventory/buffer-level/page",{

/***/ "(app-pages-browser)/./src/app/lib/actions.ts":
/*!********************************!*\
  !*** ./src/app/lib/actions.ts ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addNewItem: () => (/* binding */ addNewItem),\n/* harmony export */   addPatient: () => (/* binding */ addPatient),\n/* harmony export */   getAvailableDrugsTotalPages: () => (/* binding */ getAvailableDrugsTotalPages),\n/* harmony export */   getBatchData: () => (/* binding */ getBatchData),\n/* harmony export */   getBatchNumber: () => (/* binding */ getBatchNumber),\n/* harmony export */   getBrandName: () => (/* binding */ getBrandName),\n/* harmony export */   getCompletedFilteredDrugsByBatch: () => (/* binding */ getCompletedFilteredDrugsByBatch),\n/* harmony export */   getCompletedFilteredDrugsByBrand: () => (/* binding */ getCompletedFilteredDrugsByBrand),\n/* harmony export */   getCompletedFilteredDrugsByModel: () => (/* binding */ getCompletedFilteredDrugsByModel),\n/* harmony export */   getDrugConcentrations: () => (/* binding */ getDrugConcentrations),\n/* harmony export */   getDrugModelsWithBufferLevel: () => (/* binding */ getDrugModelsWithBufferLevel),\n/* harmony export */   getDrugName: () => (/* binding */ getDrugName),\n/* harmony export */   getFilteredDrugsByBatch: () => (/* binding */ getFilteredDrugsByBatch),\n/* harmony export */   getFilteredDrugsByBrand: () => (/* binding */ getFilteredDrugsByBrand),\n/* harmony export */   getFilteredDrugsByModel: () => (/* binding */ getFilteredDrugsByModel),\n/* harmony export */   getFilteredPatients: () => (/* binding */ getFilteredPatients),\n/* harmony export */   getIssuedPatients: () => (/* binding */ getIssuedPatients),\n/* harmony export */   getPatientDetails: () => (/* binding */ getPatientDetails),\n/* harmony export */   getStockAnalysis: () => (/* binding */ getStockAnalysis),\n/* harmony export */   getStockByBatch: () => (/* binding */ getStockByBatch),\n/* harmony export */   getStockByBrand: () => (/* binding */ getStockByBrand),\n/* harmony export */   getStockByModel: () => (/* binding */ getStockByModel),\n/* harmony export */   getSupplierWisePricing: () => (/* binding */ getSupplierWisePricing),\n/* harmony export */   getTotalPages: () => (/* binding */ getTotalPages),\n/* harmony export */   getTotalPagesForCompletedFilteredDrugsByBatch: () => (/* binding */ getTotalPagesForCompletedFilteredDrugsByBatch),\n/* harmony export */   getTotalPagesForCompletedFilteredDrugsByBrand: () => (/* binding */ getTotalPagesForCompletedFilteredDrugsByBrand),\n/* harmony export */   getTotalPagesForCompletedFilteredDrugsByModel: () => (/* binding */ getTotalPagesForCompletedFilteredDrugsByModel),\n/* harmony export */   getTotalPagesForFilteredDrugsByBatch: () => (/* binding */ getTotalPagesForFilteredDrugsByBatch),\n/* harmony export */   getTotalPagesForFilteredDrugsByBrand: () => (/* binding */ getTotalPagesForFilteredDrugsByBrand),\n/* harmony export */   getTotalPagesForFilteredDrugsByModel: () => (/* binding */ getTotalPagesForFilteredDrugsByModel),\n/* harmony export */   handleConfirmationOfBatchStatusChange: () => (/* binding */ handleConfirmationOfBatchStatusChange),\n/* harmony export */   searchDrugBrands: () => (/* binding */ searchDrugBrands),\n/* harmony export */   searchDrugModels: () => (/* binding */ searchDrugModels),\n/* harmony export */   searchSuppliers: () => (/* binding */ searchSuppliers),\n/* harmony export */   updateDrugBufferLevel: () => (/* binding */ updateDrugBufferLevel),\n/* harmony export */   updatePatient: () => (/* binding */ updatePatient)\n/* harmony export */ });\n/* harmony import */ var private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! private-next-rsc-action-client-wrapper */ \"(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js\");\n/* harmony import */ var private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__);\n/* __next_internal_action_entry_do_not_use__ {\"4005be1ba72ca1e715ec98f7f6eed9dc3de7aefeca\":\"getFilteredDrugsByBrand\",\"400eeabfcd66daae3e2b9c6ac5ceba9fac81c64707\":\"searchDrugModels\",\"402991de2925cb100f6a8aa015996b2a601694a4cc\":\"getDrugName\",\"4029ab35ca73287ac7a0c40e9bc8b8555739c5f7fd\":\"getFilteredDrugsByModel\",\"4035cf9f58df620154defdc5399cd8562aa413b026\":\"getPatientDetails\",\"403dca87f38693430d0c6b2afbfd983067927474ed\":\"getCompletedFilteredDrugsByModel\",\"403eced93f7c11a736a4e79100ce7c5cf739e1622b\":\"getBatchNumber\",\"4043386bee14185ba1515e2c1b2c15538548d21e68\":\"getSupplierWisePricing\",\"4057e760c315e49a0a42205d355f53d65a1f79e890\":\"getStockAnalysis\",\"406f0578a0e1dbec9bd5facbb9d871dd0d77661c20\":\"getIssuedPatients\",\"4073a980e56fa1d52dab9b3a2d1a905992fe5f4b58\":\"addPatient\",\"407ca96687095006b4f37c0355f80f1a27fdacd21f\":\"getTotalPagesForCompletedFilteredDrugsByBrand\",\"40849457ba0c5f3894fb9aba122884fb6f4ce8222a\":\"searchDrugBrands\",\"4084c170a160a4e48a345dc0ef61bf204d47fb3d9d\":\"getCompletedFilteredDrugsByBrand\",\"4088857bccc12d0836803db6feef417d823dc74756\":\"getFilteredDrugsByBatch\",\"409b434e4c4fd68e2904d77ac39067078634c54013\":\"getTotalPagesForFilteredDrugsByBrand\",\"409e2035dcfce1d852b96914c82eaeba5dac30ec02\":\"getTotalPagesForCompletedFilteredDrugsByModel\",\"40b30f5e28a95fa88f7257a195a485a7f50e77975e\":\"getTotalPagesForFilteredDrugsByBatch\",\"40b9e9786968cbc0a7b9f9db0ff1395736844cf347\":\"getBatchData\",\"40ccb2d71f4e66c085789e42dcb91a53235cdee869\":\"getCompletedFilteredDrugsByBatch\",\"40cdd3a94f633811e700506d5f5aa2ef363e2b576c\":\"getTotalPagesForFilteredDrugsByModel\",\"40d57e4d0d54cc8a563ce06d641f6ab6af61076abd\":\"searchSuppliers\",\"40dd9fdec4a18d61a381ad0facb905e9f3ec9f7844\":\"addNewItem\",\"40e1f707e44c8ce2c88b0e318a2beb7902b926ed12\":\"getTotalPagesForCompletedFilteredDrugsByBatch\",\"40e543c8bab9c233c537e3d326de8c0d33720f821b\":\"getStockByBrand\",\"40e5e834a1127b52ddd76957eabdb7b1caa378d621\":\"getStockByBatch\",\"40f8d5d15d5c38e22e630ca513233933a5fea844d3\":\"getBrandName\",\"40fb15b3da819b631c4cdb8f6ad05b77d7d1b47ed5\":\"getStockByModel\",\"6042bb8e1de771e247002f49abeefe7c859e53a236\":\"updatePatient\",\"6064b2d777371e3733fd367750e5a26a7287b47618\":\"getTotalPages\",\"606d8b1018b54c08942dd4809d9fa99ece58a21d8e\":\"getDrugModelsWithBufferLevel\",\"608c76d02aa08c9da8202c5a191c1aea062d2bccf4\":\"handleConfirmationOfBatchStatusChange\",\"60d0e018d5c1c11d0ce16a7664ee7781a525766663\":\"getDrugConcentrations\",\"60ec0816e907232487cbab09be1afb951af9f0c8ac\":\"getAvailableDrugsTotalPages\",\"70aceda58d67a9352aae417dae45861cb50115f322\":\"getFilteredPatients\",\"781190e03b9e9c4cb80194c3b4ce993e7b66be2fc2\":\"updateDrugBufferLevel\"} */ \nvar getTotalPages = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"6064b2d777371e3733fd367750e5a26a7287b47618\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"getTotalPages\");\nvar getFilteredPatients = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"70aceda58d67a9352aae417dae45861cb50115f322\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"getFilteredPatients\");\nvar getTotalPagesForFilteredDrugsByModel = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"40cdd3a94f633811e700506d5f5aa2ef363e2b576c\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"getTotalPagesForFilteredDrugsByModel\");\nvar getTotalPagesForFilteredDrugsByBrand = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"409b434e4c4fd68e2904d77ac39067078634c54013\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"getTotalPagesForFilteredDrugsByBrand\");\nvar getTotalPagesForFilteredDrugsByBatch = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"40b30f5e28a95fa88f7257a195a485a7f50e77975e\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"getTotalPagesForFilteredDrugsByBatch\");\nvar getFilteredDrugsByModel = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"4029ab35ca73287ac7a0c40e9bc8b8555739c5f7fd\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"getFilteredDrugsByModel\");\nvar getFilteredDrugsByBrand = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"4005be1ba72ca1e715ec98f7f6eed9dc3de7aefeca\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"getFilteredDrugsByBrand\");\nvar getFilteredDrugsByBatch = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"4088857bccc12d0836803db6feef417d823dc74756\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"getFilteredDrugsByBatch\");\nvar getPatientDetails = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"4035cf9f58df620154defdc5399cd8562aa413b026\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"getPatientDetails\");\nvar addPatient = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"4073a980e56fa1d52dab9b3a2d1a905992fe5f4b58\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"addPatient\");\nvar updatePatient = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"6042bb8e1de771e247002f49abeefe7c859e53a236\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"updatePatient\");\nvar searchSuppliers = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"40d57e4d0d54cc8a563ce06d641f6ab6af61076abd\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"searchSuppliers\");\nvar addNewItem = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"40dd9fdec4a18d61a381ad0facb905e9f3ec9f7844\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"addNewItem\");\nvar getBatchData = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"40b9e9786968cbc0a7b9f9db0ff1395736844cf347\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"getBatchData\");\nvar handleConfirmationOfBatchStatusChange = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"608c76d02aa08c9da8202c5a191c1aea062d2bccf4\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"handleConfirmationOfBatchStatusChange\");\nvar getBrandName = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"40f8d5d15d5c38e22e630ca513233933a5fea844d3\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"getBrandName\");\nvar getDrugName = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"402991de2925cb100f6a8aa015996b2a601694a4cc\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"getDrugName\");\nvar getBatchNumber = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"403eced93f7c11a736a4e79100ce7c5cf739e1622b\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"getBatchNumber\");\nvar getAvailableDrugsTotalPages = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"60ec0816e907232487cbab09be1afb951af9f0c8ac\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"getAvailableDrugsTotalPages\");\nvar getStockByModel = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"40fb15b3da819b631c4cdb8f6ad05b77d7d1b47ed5\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"getStockByModel\");\nvar getStockByBatch = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"40e5e834a1127b52ddd76957eabdb7b1caa378d621\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"getStockByBatch\");\nvar getStockByBrand = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"40e543c8bab9c233c537e3d326de8c0d33720f821b\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"getStockByBrand\");\nvar getSupplierWisePricing = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"4043386bee14185ba1515e2c1b2c15538548d21e68\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"getSupplierWisePricing\");\nvar getStockAnalysis = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"4057e760c315e49a0a42205d355f53d65a1f79e890\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"getStockAnalysis\");\nvar getTotalPagesForCompletedFilteredDrugsByModel = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"409e2035dcfce1d852b96914c82eaeba5dac30ec02\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"getTotalPagesForCompletedFilteredDrugsByModel\");\nvar getCompletedFilteredDrugsByModel = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"403dca87f38693430d0c6b2afbfd983067927474ed\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"getCompletedFilteredDrugsByModel\");\nvar getTotalPagesForCompletedFilteredDrugsByBrand = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"407ca96687095006b4f37c0355f80f1a27fdacd21f\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"getTotalPagesForCompletedFilteredDrugsByBrand\");\nvar getCompletedFilteredDrugsByBrand = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"4084c170a160a4e48a345dc0ef61bf204d47fb3d9d\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"getCompletedFilteredDrugsByBrand\");\nvar getTotalPagesForCompletedFilteredDrugsByBatch = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"40e1f707e44c8ce2c88b0e318a2beb7902b926ed12\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"getTotalPagesForCompletedFilteredDrugsByBatch\");\nvar getCompletedFilteredDrugsByBatch = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"40ccb2d71f4e66c085789e42dcb91a53235cdee869\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"getCompletedFilteredDrugsByBatch\");\nvar getIssuedPatients = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"406f0578a0e1dbec9bd5facbb9d871dd0d77661c20\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"getIssuedPatients\");\nvar searchDrugBrands = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"40849457ba0c5f3894fb9aba122884fb6f4ce8222a\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"searchDrugBrands\");\nvar searchDrugModels = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"400eeabfcd66daae3e2b9c6ac5ceba9fac81c64707\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"searchDrugModels\");\nvar getDrugConcentrations = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"60d0e018d5c1c11d0ce16a7664ee7781a525766663\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"getDrugConcentrations\");\nvar getDrugModelsWithBufferLevel = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"606d8b1018b54c08942dd4809d9fa99ece58a21d8e\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"getDrugModelsWithBufferLevel\");\nvar updateDrugBufferLevel = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"781190e03b9e9c4cb80194c3b4ce993e7b66be2fc2\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"updateDrugBufferLevel\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/lib/actions.ts\n"));

/***/ })

});