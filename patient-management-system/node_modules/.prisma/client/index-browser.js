
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.5.0
 * Query Engine version: 173f8d54f8d52e692c7e27e72a88314ec7aeff60
 */
Prisma.prismaVersion = {
  client: "6.5.0",
  engine: "173f8d54f8d52e692c7e27e72a88314ec7aeff60"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.PatientScalarFieldEnum = {
  id: 'id',
  telephone: 'telephone',
  name: 'name',
  birthDate: 'birthDate',
  address: 'address',
  height: 'height',
  weight: 'weight',
  gender: 'gender',
  NIC: 'NIC'
};

exports.Prisma.PatientHistoryScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  description: 'description',
  type: 'type',
  time: 'time',
  name: 'name'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  gender: 'gender',
  image: 'image',
  mobile: 'mobile',
  password: 'password',
  role: 'role'
};

exports.Prisma.QueueScalarFieldEnum = {
  id: 'id',
  start: 'start',
  end: 'end',
  status: 'status'
};

exports.Prisma.QueueEntryScalarFieldEnum = {
  id: 'id',
  token: 'token',
  status: 'status',
  queueId: 'queueId',
  patientId: 'patientId',
  time: 'time'
};

exports.Prisma.DrugBrandScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description'
};

exports.Prisma.DrugScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.BufferLevelScalarFieldEnum = {
  id: 'id',
  drugId: 'drugId',
  type: 'type',
  unitConcentrationId: 'unitConcentrationId',
  bufferAmount: 'bufferAmount'
};

exports.Prisma.SupplierScalarFieldEnum = {
  id: 'id',
  name: 'name',
  contact: 'contact'
};

exports.Prisma.BatchScalarFieldEnum = {
  id: 'id',
  number: 'number',
  drugId: 'drugId',
  drugBrandId: 'drugBrandId',
  type: 'type',
  fullAmount: 'fullAmount',
  expiry: 'expiry',
  stockDate: 'stockDate',
  remainingQuantity: 'remainingQuantity',
  wholesalePrice: 'wholesalePrice',
  retailPrice: 'retailPrice',
  status: 'status',
  unitConcentrationId: 'unitConcentrationId',
  supplierId: 'supplierId'
};

exports.Prisma.UnitConcentrationScalarFieldEnum = {
  id: 'id',
  concentration: 'concentration'
};

exports.Prisma.PrescriptionScalarFieldEnum = {
  id: 'id',
  time: 'time',
  presentingSymptoms: 'presentingSymptoms',
  status: 'status',
  details: 'details',
  patientId: 'patientId',
  finalPrice: 'finalPrice'
};

exports.Prisma.PrescriptionChargesScalarFieldEnum = {
  id: 'id',
  prescriptionId: 'prescriptionId',
  name: 'name',
  type: 'type',
  value: 'value',
  description: 'description'
};

exports.Prisma.VitalsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  icon: 'icon',
  color: 'color',
  placeholder: 'placeholder',
  forGender: 'forGender',
  type: 'type'
};

exports.Prisma.PrescriptionVitalsScalarFieldEnum = {
  id: 'id',
  prescriptionId: 'prescriptionId',
  vitalId: 'vitalId',
  value: 'value'
};

exports.Prisma.MedicalCertificateScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  nameOfThePatient: 'nameOfThePatient',
  addressOfThePatient: 'addressOfThePatient',
  fitForDuty: 'fitForDuty',
  dateOfSickness: 'dateOfSickness',
  recommendedLeaveDays: 'recommendedLeaveDays',
  natureOfTheDisease: 'natureOfTheDisease',
  ageOfThePatient: 'ageOfThePatient',
  reccomendations: 'reccomendations',
  time: 'time'
};

exports.Prisma.USSReferralScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  nameOfThePatient: 'nameOfThePatient',
  presentingComplaint: 'presentingComplaint',
  duration: 'duration',
  onExamination: 'onExamination',
  pshx_pmhx: 'pshx_pmhx',
  ageOfThePatient: 'ageOfThePatient',
  reportDate: 'reportDate',
  USS_type: 'USS_type',
  radiologist: 'radiologist',
  radiologist_title: 'radiologist_title',
  time: 'time'
};

exports.Prisma.ReferralLetterScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  nameOfThePatient: 'nameOfThePatient',
  consultant_speciality: 'consultant_speciality',
  consultant_name: 'consultant_name',
  condition1: 'condition1',
  condition2: 'condition2',
  condition3: 'condition3',
  investigations: 'investigations',
  ageOfThePatient: 'ageOfThePatient',
  reportDate: 'reportDate',
  time: 'time'
};

exports.Prisma.OffRecordMedsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  prescriptionId: 'prescriptionId'
};

exports.Prisma.IssueScalarFieldEnum = {
  id: 'id',
  prescriptionId: 'prescriptionId',
  batchId: 'batchId',
  drugId: 'drugId',
  brandId: 'brandId',
  strategy: 'strategy',
  quantity: 'quantity',
  dose: 'dose',
  details: 'details',
  meal: 'meal',
  type: 'type',
  unitConcentrationId: 'unitConcentrationId'
};

exports.Prisma.ReportParameterScalarFieldEnum = {
  id: 'id',
  name: 'name',
  units: 'units',
  reportTypeId: 'reportTypeId'
};

exports.Prisma.ReportTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description'
};

exports.Prisma.PatientReportScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  reportTypeId: 'reportTypeId',
  time: 'time'
};

exports.Prisma.ReportValueScalarFieldEnum = {
  id: 'id',
  reportParameterId: 'reportParameterId',
  attention: 'attention',
  value: 'value',
  patientReportId: 'patientReportId'
};

exports.Prisma.StratergyHistoryScalarFieldEnum = {
  id: 'id',
  drugId: 'drugId',
  issueId: 'issueId'
};

exports.Prisma.BatchHistoryScalarFieldEnum = {
  id: 'id',
  drugId: 'drugId',
  type: 'type',
  unitConcentrationId: 'unitConcentrationId',
  drugBrandId: 'drugBrandId',
  batchId: 'batchId'
};

exports.Prisma.ChargeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  value: 'value',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Gender = exports.$Enums.Gender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE'
};

exports.PatientHistoryType = exports.$Enums.PatientHistoryType = {
  ALLERGY: 'ALLERGY',
  MEDICAL: 'MEDICAL',
  SURGICAL: 'SURGICAL',
  FAMILY: 'FAMILY',
  SOCIAL: 'SOCIAL'
};

exports.Role = exports.$Enums.Role = {
  DOCTOR: 'DOCTOR',
  NURSE: 'NURSE'
};

exports.QueueStatus = exports.$Enums.QueueStatus = {
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED'
};

exports.VisitStatus = exports.$Enums.VisitStatus = {
  PENDING: 'PENDING',
  PRESCRIBED: 'PRESCRIBED',
  COMPLETED: 'COMPLETED'
};

exports.DrugType = exports.$Enums.DrugType = {
  TABLET: 'TABLET',
  CAPSULE: 'CAPSULE',
  SYRUP: 'SYRUP',
  EYE_DROP: 'EYE_DROP',
  EAR_DROP: 'EAR_DROP',
  NASAL_DROP: 'NASAL_DROP',
  CREAM: 'CREAM',
  OINTMENT: 'OINTMENT',
  GEL: 'GEL',
  LOTION: 'LOTION',
  INJECTION: 'INJECTION',
  INHALER: 'INHALER',
  SPRAY: 'SPRAY',
  LOZENGE: 'LOZENGE',
  SUPPOSITORY: 'SUPPOSITORY',
  PATCH: 'PATCH',
  POWDER: 'POWDER',
  SOLUTION: 'SOLUTION',
  SUSPENSION: 'SUSPENSION',
  GARGLE: 'GARGLE',
  MOUTHWASH: 'MOUTHWASH'
};

exports.BatchStatus = exports.$Enums.BatchStatus = {
  AVAILABLE: 'AVAILABLE',
  EXPIRED: 'EXPIRED',
  COMPLETED: 'COMPLETED',
  QUALITY_FAILED: 'QUALITY_FAILED',
  DISPOSED: 'DISPOSED'
};

exports.PrescriptionStatus = exports.$Enums.PrescriptionStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED'
};

exports.ChargeType = exports.$Enums.ChargeType = {
  MEDICINE: 'MEDICINE',
  FIXED: 'FIXED',
  PERCENTAGE: 'PERCENTAGE',
  PROCEDURE: 'PROCEDURE',
  DISCOUNT: 'DISCOUNT'
};

exports.VitalType = exports.$Enums.VitalType = {
  NUMBER: 'NUMBER',
  TEXT: 'TEXT',
  DATE: 'DATE'
};

exports.MedicalCertificateStatus = exports.$Enums.MedicalCertificateStatus = {
  FIT: 'FIT',
  UNFIT: 'UNFIT'
};

exports.IssuingStrategy = exports.$Enums.IssuingStrategy = {
  TDS: 'TDS',
  BD: 'BD',
  OD: 'OD',
  QDS: 'QDS',
  SOS: 'SOS',
  NOCTE: 'NOCTE',
  MANE: 'MANE',
  VESPE: 'VESPE',
  NOON: 'NOON',
  WEEKLY: 'WEEKLY',
  OTHER: 'OTHER'
};

exports.MEAL = exports.$Enums.MEAL = {
  BEFORE: 'BEFORE',
  AFTER: 'AFTER',
  WITH: 'WITH'
};

exports.Prisma.ModelName = {
  Patient: 'Patient',
  PatientHistory: 'PatientHistory',
  User: 'User',
  Queue: 'Queue',
  QueueEntry: 'QueueEntry',
  DrugBrand: 'DrugBrand',
  Drug: 'Drug',
  BufferLevel: 'BufferLevel',
  Supplier: 'Supplier',
  Batch: 'Batch',
  UnitConcentration: 'UnitConcentration',
  Prescription: 'Prescription',
  PrescriptionCharges: 'PrescriptionCharges',
  Vitals: 'Vitals',
  PrescriptionVitals: 'PrescriptionVitals',
  MedicalCertificate: 'MedicalCertificate',
  USSReferral: 'USSReferral',
  ReferralLetter: 'ReferralLetter',
  OffRecordMeds: 'OffRecordMeds',
  Issue: 'Issue',
  ReportParameter: 'ReportParameter',
  ReportType: 'ReportType',
  PatientReport: 'PatientReport',
  ReportValue: 'ReportValue',
  StratergyHistory: 'StratergyHistory',
  BatchHistory: 'BatchHistory',
  Charge: 'Charge'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
