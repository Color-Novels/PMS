// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
}

enum Role {
  DOCTOR
  NURSE
}

enum QueueStatus {
  IN_PROGRESS
  COMPLETED
}

enum VisitStatus {
  PENDING
  PRESCRIBED
  COMPLETED
}

// If change this remember to update the prescription type in IssueFromInventory
enum DrugType {
  Tablet
  Syrup
}

enum BatchStatus {
  AVAILABLE
  EXPIRED
  COMPLETED
  TRASHED
}

enum IssuingStrategy {
  /**
   * TDS (ter die sumendum) - Three times a day
   */
  TDS

  /**
   * BD (bis die) - Twice a day
   */
  BD

  /**
   * OD (omni die) - Once daily
   */
  OD

  /**
   * QDS (quater die sumendum) - Four times a day (every 6 hours)
   */
  QDS

  /**
   * SOS (si opus sit) - Take only when needed
   */
  SOS

  /**
   * NOCTE - Take at night
   */
  NOCTE

  /**
   * MANE - Take in the morning
   */
  MANE

  /**
   * VESPE - Take in the evening
   */
  VESPE

  /**
   * NOON - Take in the afternoon
   */
  NOON

  /**
   * WEEKLY - Take once a week
   */
  WEEKLY

  /**
   * OTHER - Any other prescription strategy
   */
  OTHER
}

enum MEAL {
  BEFORE
  AFTER
  WITH
}

enum PrescriptionStatus {
  PENDING
  COMPLETED
}

model Patient {
  id           Int             @id @default(autoincrement())
  telephone    String
  name         String
  birthDate    DateTime?
  address      String?
  height       Float?
  weight       Float?
  gender       Gender
  NIC          String?
  queueEntry   QueueEntry[]
  prescription Prescription[]
  reports      PatientReport[]
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  name     String
  gender   Gender
  image    String?
  mobile   String
  password String
  role     Role
}

model Queue {
  id      Int          @id @default(autoincrement())
  start   DateTime     @default(now())
  end     DateTime?
  status  QueueStatus  @default(IN_PROGRESS)
  entries QueueEntry[]
}

model QueueEntry {
  id        Int         @id @default(autoincrement())
  token     Int // Token number within the queue
  status    VisitStatus @default(PENDING)
  queue     Queue       @relation(fields: [queueId], references: [id])
  queueId   Int
  patient   Patient     @relation(fields: [patientId], references: [id])
  patientId Int
  time      DateTime    @default(now())

  @@unique([queueId, token]) // Ensure token uniqueness within a queue
}

model DrugBrand {
  id               Int                @id @default(autoincrement())
  name             String
  description      String?
  Batch            Batch[]
  Issue            Issue[]
  StratergyHistory StratergyHistory[]
  BatchHistory     BatchHistory[]
}

model Drug {
  id               Int                @id @default(autoincrement())
  name             String
  batch            Batch[]
  stratergyHistory StratergyHistory[]
  Issue            Issue[]
  BatchHistory     BatchHistory[]
  DrugWeight       DrugWeight[]
}

model Batch {
  id                Int            @id @default(autoincrement())
  number            String
  drugId            Int
  drug              Drug           @relation(fields: [drugId], references: [id])
  drugBrandId       Int
  drugBrand         DrugBrand      @relation(fields: [drugBrandId], references: [id])
  type              DrugType
  fullAmount        Float
  expiry            DateTime
  stockDate         DateTime       @default(now())
  remainingQuantity Float
  wholesalePrice    Float
  retailPrice       Float
  status            BatchStatus
  Issue             Issue[]
  BatchHistory      BatchHistory[]
}

model Weights {
  id               Int                @id @default(autoincrement())
  weight           Float              @unique
  DrugWeight       DrugWeight[]
  Issue            Issue[]
  StratergyHistory StratergyHistory[]
}

model DrugWeight {
  id       Int     @id @default(autoincrement())
  drugId   Int
  drug     Drug    @relation(fields: [drugId], references: [id])
  weightId Int
  weight   Weights @relation(fields: [weightId], references: [id])
}

model Prescription {
  id                 Int                @id @default(autoincrement())
  time               DateTime           @default(now())
  presentingSymptoms String
  status             PrescriptionStatus @default(PENDING)
  extraDoctorCharge  Float?
  details            String?
  bloodPressure      String?
  pulse              String?
  cardiovascular     String?
  patient            Patient            @relation(fields: [patientId], references: [id])
  patientId          Int
  issues             Issue[]
  OffRecordMeds      OffRecordMeds[]
  Bill               Bill?
}

model Bill {
  id               Int          @id @default(autoincrement())
  doctorCharge     Float
  dispensaryCharge Float
  medicinesCharge  Float
  Prescription     Prescription @relation(fields: [prescriptionId], references: [id])
  prescriptionId   Int          @unique // Ensures one-to-one relationship
}

model OffRecordMeds {
  id             Int          @id @default(autoincrement())
  name           String
  description    String?
  prescription   Prescription @relation(fields: [prescriptionId], references: [id])
  prescriptionId Int
}

model Issue {
  id               Int                @id @default(autoincrement())
  prescription     Prescription       @relation(fields: [prescriptionId], references: [id])
  prescriptionId   Int
  batch            Batch?             @relation(fields: [batchId], references: [id])
  batchId          Int?
  drug             Drug               @relation(fields: [drugId], references: [id])
  drugId           Int
  brand            DrugBrand          @relation(fields: [brandId], references: [id])
  brandId          Int
  strategy         IssuingStrategy
  weight           Weights            @relation(fields: [weightsId], references: [id])
  quantity         Float
  dose             Float
  details          String?
  meal             MEAL?
  stratergyHistory StratergyHistory[]
  weightsId        Int
}

model ReportParameter {
  id           Int           @id @default(autoincrement())
  name         String
  units        String?
  ReportType   ReportType?   @relation(fields: [reportTypeId], references: [id], onDelete: Cascade)
  reportTypeId Int?
  ReportValue  ReportValue[]
}

model ReportType {
  id            Int               @id @default(autoincrement())
  name          String            @unique
  description   String?
  parameters    ReportParameter[]
  PatientReport PatientReport[]
}

model PatientReport {
  id           Int           @id @default(autoincrement())
  patient      Patient       @relation(fields: [patientId], references: [id])
  patientId    Int
  reportType   ReportType    @relation(fields: [reportTypeId], references: [id], onDelete: Cascade)
  reportTypeId Int
  time         DateTime      @default(now())
  parameters   ReportValue[]
}

model ReportValue {
  id                Int             @id @default(autoincrement())
  reportParameter   ReportParameter @relation(fields: [reportParameterId], references: [id], onDelete: Cascade)
  reportParameterId Int
  attention         Boolean         @default(false)
  value             String
  PatientReport     PatientReport?  @relation(fields: [patientReportId], references: [id], onDelete: Cascade)
  patientReportId   Int?
}

model StratergyHistory {
  id           Int       @id @default(autoincrement())
  drug         Drug      @relation(fields: [drugId], references: [id])
  drugId       Int       @unique
  brand        DrugBrand @relation(fields: [brandId], references: [id])
  lastDrugType DrugType
  brandId      Int
  weight       Weights   @relation(fields: [weightsId], references: [id])
  issue        Issue     @relation(fields: [issueId], references: [id])
  issueId      Int
  weightsId    Int
}

model BatchHistory {
  id          Int       @id @default(autoincrement())
  drug        Drug      @relation(fields: [drugId], references: [id])
  brand       DrugBrand @relation(fields: [drugBrandId], references: [id])
  drugId      Int
  drugBrandId Int
  batchId     Int
  batch       Batch     @relation(fields: [batchId], references: [id])

  @@unique([drugId, drugBrandId])
}

enum ChargeType {
  DOCTOR
  DISPENSARY
}

model Charge {
  name      ChargeType @id
  value     Float
  updatedAt DateTime   @updatedAt // Tracks last modification
}
