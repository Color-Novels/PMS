// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
}

enum Role {
  DOCTOR
  NURSE
}

enum QueueStatus {
  IN_PROGRESS
  COMPLETED
}

enum VisitStatus {
  PENDING
  PRESCRIBED
  COMPLETED
}

enum DrugType {
  Tablet
  Syrup
}

enum BatchStatus {
  AVAILABLE
  EXPIRED
  COMPLETED
  TRASHED
}

model Patient {
  id           Int             @id @default(autoincrement())
  telephone    String
  name         String
  birthDate    DateTime?
  address      String?
  height       Float?
  weight       Float?
  gender       Gender
  NIC          String?
  queueEntry   QueueEntry[]
  prescription Prescription[]
  reports      PatientReport[]
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  name     String
  mobile   String
  password String
  role     Role
}

model Queue {
  id      Int          @id @default(autoincrement())
  start   DateTime     @default(now())
  end     DateTime?
  status  QueueStatus  @default(IN_PROGRESS)
  entries QueueEntry[]
}

model QueueEntry {
  id        Int         @id @default(autoincrement())
  token     Int // Token number within the queue
  status    VisitStatus @default(PENDING)
  queue     Queue       @relation(fields: [queueId], references: [id])
  queueId   Int
  patient   Patient     @relation(fields: [patientId], references: [id])
  patientId Int
  time      DateTime    @default(now())

  @@unique([queueId, token]) // Ensure token uniqueness within a queue
}

model DrugBrand {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  Batch       Batch[]
}

model Drug {
  id    Int     @id @default(autoincrement())
  name  String
  batch Batch[]
}

model Batch {
  id                Int         @id @default(autoincrement())
  number            String
  drugId            Int
  drug              Drug        @relation(fields: [drugId], references: [id])
  drugBrandId       Int
  drugBrand         DrugBrand   @relation(fields: [drugBrandId], references: [id])
  type              DrugType
  fullAmount        Float
  expiry            DateTime
  stockDate         DateTime    @default(now())
  remainingQuantity Float
  price             Float
  status            BatchStatus
  Issue             Issue[]
}

model Prescription {
  id        Int      @id @default(autoincrement())
  time      DateTime @default(now())
  patient   Patient  @relation(fields: [patientId], references: [id])
  patientId Int
  issues    Issue[]
}

model Issue {
  id             Int          @id @default(autoincrement())
  prescription   Prescription @relation(fields: [prescriptionId], references: [id])
  prescriptionId Int
  batch          Batch        @relation(fields: [batchId], references: [id])
  batchId        Int
}

model ReportParameter {
  id           Int           @id @default(autoincrement())
  name         String
  units        String?
  ReportType   ReportType?   @relation(fields: [reportTypeId], references: [id])
  reportTypeId Int?
  ReportValue  ReportValue[]
}

model ReportType {
  id            Int               @id @default(autoincrement())
  name          String            @unique
  description   String?
  parameters    ReportParameter[]
  PatientReport PatientReport[]
}

model PatientReport {
  id           Int           @id @default(autoincrement())
  patient      Patient       @relation(fields: [patientId], references: [id])
  patientId    Int
  reportType   ReportType    @relation(fields: [reportTypeId], references: [id])
  reportTypeId Int
  time         DateTime      @default(now())
  parameters   ReportValue[]
}

model ReportValue {
  id                Int             @id @default(autoincrement())
  reportParameter   ReportParameter @relation(fields: [reportParameterId], references: [id])
  reportParameterId Int
  value             String
  PatientReport     PatientReport?  @relation(fields: [patientReportId], references: [id])
  patientReportId   Int?
}
