name: CI/CD Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: Production

    env:
      DOCKER_USERNAME: ${{ vars.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      EC2_HOST: ${{ vars.EC2_HOST }}
      EC2_DEPLOY_SSH_KEY: ${{ secrets.EC2_DEPLOY_SSH_KEY }}
      AWS_REGION: ${{ vars.AWS_REGION }}
      EC2_SECURITY_GROUP_ID: ${{ vars.EC2_SECURITY_GROUP_ID }}

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get GitHub runner public IP
        id: ip
        uses: haythem/public-ip@v1.2

      - name: Authorize SSH from GitHub runner
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id $EC2_SECURITY_GROUP_ID \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_USERNAME }}/pms-thoduwawa:latest

      - name: SSH Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.EC2_HOST }}
          username: deploy
          key: ${{ env.EC2_DEPLOY_SSH_KEY }}
          script: |
            cd /home/deploy/app

            echo "üßπ Stopping old container if exists..."
            docker stop pms-thoduwawa || true
            docker rm pms-thoduwawa || true

            echo "üóëÔ∏è Removing old image if exists..."
            docker rmi ${{ env.DOCKER_USERNAME }}/pms-thoduwawa:latest || true

            echo "üö™ Logging into Docker Hub..."
            echo ${{ env.DOCKER_PASSWORD }} | docker login -u ${{ env.DOCKER_USERNAME }} --password-stdin

            echo "üì¶ Pulling latest image..."
            docker pull ${{ env.DOCKER_USERNAME }}/pms-thoduwawa:latest

            echo "üöÄ Starting container..."
            docker run -d \
              --name pms-thoduwawa \
              --env-file /home/deploy/app/.env \
              -p 3000:3000 \
              --restart unless-stopped \
              ${{ env.DOCKER_USERNAME }}/pms-thoduwawa:latest

      - name: Revoke SSH access for GitHub runner
        if: always()
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id $EC2_SECURITY_GROUP_ID \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32
